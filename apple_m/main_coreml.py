import os
import sys
import argparse
import signal
import warnings
import logging
from io import BytesIO
import struct


def suppress_stderr():
    sys.stderr = open(os.devnull, 'w')

def restore_stderr():
    sys.stderr = sys.__stderr__

# suppress_stderr()
from python_coreml_stable_diffusion.run import main
from python_coreml_stable_diffusion.coreml_model import (
    get_available_compute_units,
)
# restore_stderr()


def setup_logging():
    logging.basicConfig(level=logging.ERROR)
    logging.getLogger("transformers").setLevel(logging.ERROR)
    logging.getLogger("diffusers").setLevel(logging.ERROR)
    logging.getLogger("coremltools").setLevel(logging.ERROR)


def suppress_warnings():
    warnings.filterwarnings("ignore")


def suppress_stdout_stderr():
    sys.stdout = open(os.devnull, "w")
    sys.stderr = open(os.devnull, "w")


def restore_stdout_stderr():
    sys.stdout = sys.__stdout__
    sys.stderr = sys.__stderr__


def handle_exit(signum, frame):
    sys.exit(0)


def output_image_to_stdout(image):
    # restore_stdout_stderr()

    buffer = BytesIO()
    image.save(buffer, format="PNG")
    image_data = buffer.getvalue()
    buffer.close()

    image_size = len(image_data)

    size_bytes = struct.pack("<I", image_size)

    sys.stderr.write(f"{image_size} \n")
    sys.stdout.buffer.write(size_bytes)
    sys.stdout.buffer.flush()

    sys.stdout.buffer.write(image_data)
    sys.stdout.buffer.flush()

    print(output_image_to_stdout)

    # suppress_stdout_stderr()


if __name__ == "__main__":
    setup_logging()
    suppress_warnings()

    signal.signal(signal.SIGINT, handle_exit) 
    signal.signal(signal.SIGTERM, handle_exit) 

    parser = argparse.ArgumentParser()

    parser.add_argument(
        "-i",
        default="./coreml-stable-diffusion-2-1-base-palettized_split_einsum_v2_compiled/original/packages",
        help="Path to input directory with the .mlpackage files generated by python_coreml_stable_diffusion.torch2coreml")
    parser.add_argument(
        "-o",
        default="./",
        help="Output directory for generated images")
    parser.add_argument(
        "--seed",
        "-s",
        default=0,
        type=int,
        help="Random seed to be able to reproduce results")
    parser.add_argument(
        "--model-version",
        default="CompVis/stable-diffusion-v1-4",
        help="The pre-trained model checkpoint and configuration to restore.")
    parser.add_argument(
        "--compute-unit",
        choices=get_available_compute_units(),
        default="CPU_AND_NE",
        help="The compute units to be used when executing Core ML models.")
    parser.add_argument(
        "--scheduler",
        default="DDIM",
        help="The scheduler to use for running the reverse diffusion process.")
    parser.add_argument(
        "--num-inference-steps",
        default=20,
        type=int,
        help="The number of iterations the unet model will be executed throughout the reverse diffusion process")
    parser.add_argument(
        "--guidance-scale",
        default=7.5,
        type=float,
        help="Controls the influence of the text prompt on sampling process (0=random images)")
    parser.add_argument(
        "--controlnet",
        nargs="*",
        type=str,
        help="Enables ControlNet and uses control-unet instead of unet for additional inputs.")
    parser.add_argument(
        "--controlnet-inputs",
        nargs="*",
        type=str,
        help="Image paths for ControlNet inputs. Correspond to each controlnet provided at --controlnet option in same order.")
    parser.add_argument(
        "--negative-prompt",
        default="blurry, low quality, pixelated, out of focus, distorted, unnatural, grainy, low resolution, noise, artifacts, smudges, overexposure, underexposure, watermarks, text, logos, faces, people, animals, characters, cartoon, 3D render, frame, borders, gradients, shadows, over-saturated colors, strong reflections, transparent, glossy, neon colors, overly complex shapes",
        help="The negative text prompt to be used for text-to-image generation.")
    parser.add_argument(
        "--unet-batch-one",
        action="store_true",
        help="Do not batch unet predictions for the prompt and negative prompt.")
    parser.add_argument(
        '--model-sources',
        default="compiled",
        choices=['packages', 'compiled'],
        help='Force build from `packages` or `compiled`.')

    args = parser.parse_args()

    while True:
        try:
           
            prompt = input()
            if not prompt:
                exit()

            args.prompt = prompt

            # suppress_stdout_stderr()
            image = main(args)
            # restore_stdout_stderr()

            output_image_to_stdout(image)

        except EOFError:
            handle_exit(None, None)
        # except Exception as e:
            # restore_stdout_stderr()